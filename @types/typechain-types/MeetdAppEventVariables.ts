/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MeetdAppEventVariablesInterface extends utils.Interface {
  contractName: "MeetdAppEventVariables";
  functions: {
    "eventAttendees(address)": FunctionFragment;
    "eventDescription()": FunctionFragment;
    "eventEndTime()": FunctionFragment;
    "eventFactory()": FunctionFragment;
    "eventId()": FunctionFragment;
    "eventLocation()": FunctionFragment;
    "eventName()": FunctionFragment;
    "eventNfts()": FunctionFragment;
    "eventOwner()": FunctionFragment;
    "eventReedemableTime()": FunctionFragment;
    "eventRemainingTickets()": FunctionFragment;
    "eventSecretWordHash()": FunctionFragment;
    "eventStartTime()": FunctionFragment;
    "eventTotalTickets()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "eventAttendees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "eventDescription",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eventEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eventFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "eventId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eventLocation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "eventName", values?: undefined): string;
  encodeFunctionData(functionFragment: "eventNfts", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eventOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eventReedemableTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eventRemainingTickets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eventSecretWordHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eventStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eventTotalTickets",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "eventAttendees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eventId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eventLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eventName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eventNfts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eventOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eventReedemableTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventRemainingTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventSecretWordHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventTotalTickets",
    data: BytesLike
  ): Result;

  events: {
    "BoughtTicket(address)": EventFragment;
    "RefundedTicket(address)": EventFragment;
    "TransferredTicket(address,address)": EventFragment;
    "UpdatedEventDescription(string)": EventFragment;
    "UpdatedEventEndTime(uint256)": EventFragment;
    "UpdatedEventLocation(string)": EventFragment;
    "UpdatedEventName(string)": EventFragment;
    "UpdatedEventOwner(address)": EventFragment;
    "UpdatedEventStartTime(uint256)": EventFragment;
    "UpdatedEventTotalTickets(uint256)": EventFragment;
    "UpdatedReedemableTimeAndSecretWordHash(uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BoughtTicket"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefundedTicket"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferredTicket"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedEventDescription"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedEventEndTime"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedEventLocation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedEventName"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedEventOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedEventStartTime"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedEventTotalTickets"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdatedReedemableTimeAndSecretWordHash"
  ): EventFragment;
}

export type BoughtTicketEvent = TypedEvent<[string], { buyer: string }>;

export type BoughtTicketEventFilter = TypedEventFilter<BoughtTicketEvent>;

export type RefundedTicketEvent = TypedEvent<[string], { buyer: string }>;

export type RefundedTicketEventFilter = TypedEventFilter<RefundedTicketEvent>;

export type TransferredTicketEvent = TypedEvent<
  [string, string],
  { buyer: string; newOwner: string }
>;

export type TransferredTicketEventFilter =
  TypedEventFilter<TransferredTicketEvent>;

export type UpdatedEventDescriptionEvent = TypedEvent<
  [string],
  { eventDescription: string }
>;

export type UpdatedEventDescriptionEventFilter =
  TypedEventFilter<UpdatedEventDescriptionEvent>;

export type UpdatedEventEndTimeEvent = TypedEvent<
  [BigNumber],
  { eventEndTime: BigNumber }
>;

export type UpdatedEventEndTimeEventFilter =
  TypedEventFilter<UpdatedEventEndTimeEvent>;

export type UpdatedEventLocationEvent = TypedEvent<
  [string],
  { eventLocation: string }
>;

export type UpdatedEventLocationEventFilter =
  TypedEventFilter<UpdatedEventLocationEvent>;

export type UpdatedEventNameEvent = TypedEvent<[string], { eventName: string }>;

export type UpdatedEventNameEventFilter =
  TypedEventFilter<UpdatedEventNameEvent>;

export type UpdatedEventOwnerEvent = TypedEvent<
  [string],
  { eventOwner: string }
>;

export type UpdatedEventOwnerEventFilter =
  TypedEventFilter<UpdatedEventOwnerEvent>;

export type UpdatedEventStartTimeEvent = TypedEvent<
  [BigNumber],
  { eventStartTime: BigNumber }
>;

export type UpdatedEventStartTimeEventFilter =
  TypedEventFilter<UpdatedEventStartTimeEvent>;

export type UpdatedEventTotalTicketsEvent = TypedEvent<
  [BigNumber],
  { eventTotalTickets: BigNumber }
>;

export type UpdatedEventTotalTicketsEventFilter =
  TypedEventFilter<UpdatedEventTotalTicketsEvent>;

export type UpdatedReedemableTimeAndSecretWordHashEvent = TypedEvent<
  [BigNumber, string],
  { eventReedemableTime: BigNumber; eventSecretWordHash: string }
>;

export type UpdatedReedemableTimeAndSecretWordHashEventFilter =
  TypedEventFilter<UpdatedReedemableTimeAndSecretWordHashEvent>;

export interface MeetdAppEventVariables extends BaseContract {
  contractName: "MeetdAppEventVariables";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MeetdAppEventVariablesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    eventAttendees(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    eventDescription(overrides?: CallOverrides): Promise<[string]>;

    eventEndTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    eventFactory(overrides?: CallOverrides): Promise<[string]>;

    eventId(overrides?: CallOverrides): Promise<[string]>;

    eventLocation(overrides?: CallOverrides): Promise<[string]>;

    eventName(overrides?: CallOverrides): Promise<[string]>;

    eventNfts(overrides?: CallOverrides): Promise<[string]>;

    eventOwner(overrides?: CallOverrides): Promise<[string]>;

    eventReedemableTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    eventRemainingTickets(overrides?: CallOverrides): Promise<[BigNumber]>;

    eventSecretWordHash(overrides?: CallOverrides): Promise<[string]>;

    eventStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    eventTotalTickets(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  eventAttendees(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  eventDescription(overrides?: CallOverrides): Promise<string>;

  eventEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  eventFactory(overrides?: CallOverrides): Promise<string>;

  eventId(overrides?: CallOverrides): Promise<string>;

  eventLocation(overrides?: CallOverrides): Promise<string>;

  eventName(overrides?: CallOverrides): Promise<string>;

  eventNfts(overrides?: CallOverrides): Promise<string>;

  eventOwner(overrides?: CallOverrides): Promise<string>;

  eventReedemableTime(overrides?: CallOverrides): Promise<BigNumber>;

  eventRemainingTickets(overrides?: CallOverrides): Promise<BigNumber>;

  eventSecretWordHash(overrides?: CallOverrides): Promise<string>;

  eventStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  eventTotalTickets(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    eventAttendees(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    eventDescription(overrides?: CallOverrides): Promise<string>;

    eventEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    eventFactory(overrides?: CallOverrides): Promise<string>;

    eventId(overrides?: CallOverrides): Promise<string>;

    eventLocation(overrides?: CallOverrides): Promise<string>;

    eventName(overrides?: CallOverrides): Promise<string>;

    eventNfts(overrides?: CallOverrides): Promise<string>;

    eventOwner(overrides?: CallOverrides): Promise<string>;

    eventReedemableTime(overrides?: CallOverrides): Promise<BigNumber>;

    eventRemainingTickets(overrides?: CallOverrides): Promise<BigNumber>;

    eventSecretWordHash(overrides?: CallOverrides): Promise<string>;

    eventStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    eventTotalTickets(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "BoughtTicket(address)"(buyer?: null): BoughtTicketEventFilter;
    BoughtTicket(buyer?: null): BoughtTicketEventFilter;

    "RefundedTicket(address)"(buyer?: null): RefundedTicketEventFilter;
    RefundedTicket(buyer?: null): RefundedTicketEventFilter;

    "TransferredTicket(address,address)"(
      buyer?: null,
      newOwner?: null
    ): TransferredTicketEventFilter;
    TransferredTicket(
      buyer?: null,
      newOwner?: null
    ): TransferredTicketEventFilter;

    "UpdatedEventDescription(string)"(
      eventDescription?: null
    ): UpdatedEventDescriptionEventFilter;
    UpdatedEventDescription(
      eventDescription?: null
    ): UpdatedEventDescriptionEventFilter;

    "UpdatedEventEndTime(uint256)"(
      eventEndTime?: null
    ): UpdatedEventEndTimeEventFilter;
    UpdatedEventEndTime(eventEndTime?: null): UpdatedEventEndTimeEventFilter;

    "UpdatedEventLocation(string)"(
      eventLocation?: null
    ): UpdatedEventLocationEventFilter;
    UpdatedEventLocation(eventLocation?: null): UpdatedEventLocationEventFilter;

    "UpdatedEventName(string)"(eventName?: null): UpdatedEventNameEventFilter;
    UpdatedEventName(eventName?: null): UpdatedEventNameEventFilter;

    "UpdatedEventOwner(address)"(
      eventOwner?: null
    ): UpdatedEventOwnerEventFilter;
    UpdatedEventOwner(eventOwner?: null): UpdatedEventOwnerEventFilter;

    "UpdatedEventStartTime(uint256)"(
      eventStartTime?: null
    ): UpdatedEventStartTimeEventFilter;
    UpdatedEventStartTime(
      eventStartTime?: null
    ): UpdatedEventStartTimeEventFilter;

    "UpdatedEventTotalTickets(uint256)"(
      eventTotalTickets?: null
    ): UpdatedEventTotalTicketsEventFilter;
    UpdatedEventTotalTickets(
      eventTotalTickets?: null
    ): UpdatedEventTotalTicketsEventFilter;

    "UpdatedReedemableTimeAndSecretWordHash(uint256,bytes32)"(
      eventReedemableTime?: null,
      eventSecretWordHash?: null
    ): UpdatedReedemableTimeAndSecretWordHashEventFilter;
    UpdatedReedemableTimeAndSecretWordHash(
      eventReedemableTime?: null,
      eventSecretWordHash?: null
    ): UpdatedReedemableTimeAndSecretWordHashEventFilter;
  };

  estimateGas: {
    eventAttendees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    eventDescription(overrides?: CallOverrides): Promise<BigNumber>;

    eventEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    eventFactory(overrides?: CallOverrides): Promise<BigNumber>;

    eventId(overrides?: CallOverrides): Promise<BigNumber>;

    eventLocation(overrides?: CallOverrides): Promise<BigNumber>;

    eventName(overrides?: CallOverrides): Promise<BigNumber>;

    eventNfts(overrides?: CallOverrides): Promise<BigNumber>;

    eventOwner(overrides?: CallOverrides): Promise<BigNumber>;

    eventReedemableTime(overrides?: CallOverrides): Promise<BigNumber>;

    eventRemainingTickets(overrides?: CallOverrides): Promise<BigNumber>;

    eventSecretWordHash(overrides?: CallOverrides): Promise<BigNumber>;

    eventStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    eventTotalTickets(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    eventAttendees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eventDescription(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventEndTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventLocation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventNfts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventReedemableTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eventRemainingTickets(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eventSecretWordHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eventStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventTotalTickets(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
