/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MeetdAppFactoryInterface extends utils.Interface {
  contractName: "MeetdAppFactory";
  functions: {
    "CreateEvent(string[],uint256[])": FunctionFragment;
    "mapEventNum(uint256)": FunctionFragment;
    "mapIdEvent(bytes32)": FunctionFragment;
    "numEvents()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CreateEvent",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mapEventNum",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mapIdEvent",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "numEvents", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "CreateEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mapEventNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mapIdEvent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numEvents", data: BytesLike): Result;

  events: {
    "createdEvent(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "createdEvent"): EventFragment;
}

export type createdEventEvent = TypedEvent<[string], { eventId: string }>;

export type createdEventEventFilter = TypedEventFilter<createdEventEvent>;

export interface MeetdAppFactory extends BaseContract {
  contractName: "MeetdAppFactory";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MeetdAppFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CreateEvent(
      _varStr: string[],
      _varInt: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mapEventNum(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string] & {
        active: boolean;
        eventId: string;
        eventAddr: string;
      }
    >;

    mapIdEvent(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    numEvents(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  CreateEvent(
    _varStr: string[],
    _varInt: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mapEventNum(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, string] & {
      active: boolean;
      eventId: string;
      eventAddr: string;
    }
  >;

  mapIdEvent(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  numEvents(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    CreateEvent(
      _varStr: string[],
      _varInt: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    mapEventNum(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string] & {
        active: boolean;
        eventId: string;
        eventAddr: string;
      }
    >;

    mapIdEvent(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    numEvents(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "createdEvent(string)"(eventId?: null): createdEventEventFilter;
    createdEvent(eventId?: null): createdEventEventFilter;
  };

  estimateGas: {
    CreateEvent(
      _varStr: string[],
      _varInt: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mapEventNum(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mapIdEvent(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    numEvents(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CreateEvent(
      _varStr: string[],
      _varInt: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mapEventNum(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mapIdEvent(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numEvents(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
